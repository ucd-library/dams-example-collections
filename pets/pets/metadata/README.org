:PROPERTIES:
:header-args:    :exports both :eval no-export :cache yes
:END:

#+LINK: fin https://github.com/UCDavisLibrary/fin-server
#+LINK: fin-cli https://github.com/UCDavisLibrary/fin-cli
#+LINK: Fedora-LDP https://fedora.info/spec/
#+LINK: schema https://schema.org/

* Example 1 - Collaborator Pets

Our collaborator pets collection is the most basic type of collection that can
be added into the DAMS. This example contains a simple set of digital images
with a small amount of data about the pets. Each pet, eg. [[./ashley.jpg][ashley.jpg]] is included
in their own image file, and each image file has some associated metadata in a
~.ttl~ sidecar, eg. [[./ashley.jpeg.ttl][ashley.jpeg.ttl]]. The metadata is in ~text/turtle~ format.
The [[./index.ttl][index.ttl]] file includes information about the collection as a whole.
Finally, we have an additional [[./graph.hdt][graph.hdt]] file is explained in more detail below.

This collection can all be created with the [[./import.sh][import.sh]] script, and we will be
going through that script line-by-line to describe the general steps for
creating new collections.  Before we do that though, we first need to describe
the object structure in our [[Fedora-LDP]].

** Object Structure

Whereever possible, we use [[schema][Schema.org]] to organize our collections and items. To
that end, Every collection is defined as a [[schema:Collection][schema:Collection]] and every item in a
collection is a [[schema:CreativeWork][schema:creativework]]. the items of a collection are defined with
the property [[schema:haspart][schema:haspart]]. this is fundamental organization of a collection.
this [[./docs/generic_diagram.png][generic diagram]], describes that relationship. since [[schema:collection][schema:collection]] are
themselves [[schema:creativework][creativework]] then all properties of those apply. some of the
properties that are indexed and in some cases faceted in our dams include [[schema:name][name]],
[[schema:about][about]], [[schema:keywords][keywords]], [[schema:alternativeheadline][alternativeheadline]],[[schema:license][license]],[[schema:creator][creator]], [[schema::datepublished][datepublished]]


#+begin_src plantuml  :file ./docs/generic_diagram.png
    @startuml

    object "schema:collection" as scol {
  }

    object "schema:creativework" as scw {
 schema:name "text";
 schema:alternativeheadline "text";
 schema:keywords "text";
 schema:license <link>;
 schema:about <link>;
 schema:creator "text" or <link>;
 schema:datepublished "text".
  }

    object "/collections" as collections {
         name = "example repository"
    }

    collections o-- scol
    scol "haspart" o-- "ispartof" scw

      @enduml
#+end_src

#+results:
[[file:./docs/generic_diagram.png]]

now, for our example, each individual pet is an item within our collection.  the
following diagram replaces the generic objects with some of the actual objects
in our collection. The corresponding metadata files are [[index.ttl]], [[ashley.ttl]], and [[mochi.ttl]].

#+BEGIN_SRC plantuml  :file ./docs/diagram.png
  @startuml

  object "schema:Collection" as sCol
  object "schema:ImageObject" as sImage

  object "/collections" as Collections {
			 schema:name = "Example Repository"
  }

  object "Collaborator Pets" as Pets {
  schema:name ="Collaborator Pets"
  schema:keywords ="Pets", "Cats", "Dogs"
  schema:license = <http://rightsstatements.org/vocab/InC-NC/1.0/>
  schema:creator ="Quinn Hart";
  schema:datePublished ="2018"
  schema:description ="This collection ..."
  }

  object Ashley {
 schema:name "Ashley";
 schema:alternativeHeadline "Why do I need ...";
 schema:keywords "Cat";
 schema:license <http://rightsstatements.org/vocab/InC-NC/1.0/>;
 schema:about <http://en.wikipedia.org/wiki/Cat>;
 schema:creator "Quinn Hart";
 schema:datePublished "2015"^^<http://www.w3.org/2001/XMLSchema#date> ;
 my:owner "Quinn Hart".
  }

  object Mochi {
 schema:name "Mochi";
 schema:alternativeHeadline "Two rubs exactly..";
 schema:keywords "Cat";
 schema:license <http://rightsstatements.org/vocab/InC-NC/1.0/>;
 schema:about <http://en.wikipedia.org/wiki/Cat>;
 schema:creator "Kimmy Hescock";
 schema:datePublished "2008"^^<http://www.w3.org/2001/XMLSchema#date> ;
 my:owner "Kimmy Hescock".
  }

  Collections "hasPart" o-- "isPartOf" Pets
  Pets "a  " <|-- sCol
  Pets "hasPart" o-- "isPartOf" Ashley
  Pets "hasPart" o-- "isPartOf" Mochi
  Mochi "a  " <|-- sImage
  Ashley "a  " <|-- sImage

    @enduml
#+END_SRC

#+RESULTS:
[[file:./docs/diagram.png]]


** Data import

Ok, let's go through the [[import.sh]] file, and see what's being done in this
example.

*** Administrative Privleges

The steps below assume that you are currently logged in to your
fin server, as an admin.  How to do this is explained in the installation
instructions.  You can verify this with the following command, which access the
root location, and verifies you can write to this location.

#+BEGIN_SRC bash  :results type scalar
fin http get -P b / | grep fedora:writable
#+END_SRC

#+RESULTS[0ba08e1d3cd467885c11abdb76cb91efc0dda7b0]:
:         fedora:writable                "true"^^<http://www.w3.org/2001/XMLSchema#boolean> ;

** Make a new Collection

Let's start with the collection description.  That's stored in the `index.ttl`
file.  This file describes the collection. `index.ttl` is a pretty easy file to
understand, you'll see a name, and description and some keywords.  If you're
savy with your linked data, you will see that by default we like to use
schema.org for our descriptions.  This is not a requirement for the server, but
lots of the DAMS setup expects to use this schema when indexing collections and
data.


#+INCLUDE: "index.ttl" example ttl

fin has some special commands to create and administrate collections.  Let's
go ahead and create our new collection.

#+BEGIN_SRC sh :results type scalar :exports both :eval no-export
fin collection create example_1-pets index.ttl
#+END_SRC

#+RESULTS:
: New collection created at: /collection/example_1-pets

This command creates a new container in our system, for the new collection, but
it does more than that. It sets up some default access control conditions, and
organizes standard locations for things like groups for this collection. Also,
with the addition of the metadata in our index.ttl file, it also describes the
contents of this collection, which is then used in the default Interface for the
repository. After this step, you should be able to navigate to
http://localhost:3000/fcrepo/rest/collection, and see your newly created
example_1-pets collection. You may need to login to your account via
http://localhost:3000/auth/basic/login.html to give your browser access.

** Collection Access Control
By default new collections are not publicly available.  Let's make this
available for anyone.

#+BEGIN_SRC bash :results type scaler
fin collection acl user add example_1-pets foaf:Agent r
#+END_SRC

#+RESULTS:
: Authorization added /collection/example_1-pets/.acl/u/foaf:Agent/collection/example_1-pets/r

** Add Example Data

Now we want to add some additional

* Graphs

One problem that is currently not completely solved

* Amended metadata representation
